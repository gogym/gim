/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf')
var goog = jspb
var global = Function('return this')()

goog.exportSymbol('proto.Message', null, global)

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Message = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null)
}
goog.inherits(proto.Message, jspb.Message)
if (goog.DEBUG && !COMPILED) {
    proto.Message.displayName = 'proto.Message'
}

if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto suitable for use in Soy templates.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
     * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
     *     for transitional soy proto support: http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.Message.prototype.toObject = function (opt_includeInstance) {
        return proto.Message.toObject(opt_includeInstance, this)
    }

    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Whether to include the JSPB
     *     instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.Message} msg The msg instance to transform.
     * @return {!Object}
     */
    proto.Message.toObject = function (includeInstance, msg) {
        var f, obj = {
            id: jspb.Message.getFieldWithDefault(msg, 1, ''),
            serverid: jspb.Message.getFieldWithDefault(msg, 2, ''),
            reqtype: jspb.Message.getFieldWithDefault(msg, 3, 0),
            msgtime: jspb.Message.getFieldWithDefault(msg, 4, 0),
            ack: jspb.Message.getFieldWithDefault(msg, 5, ''),
            fromid: jspb.Message.getFieldWithDefault(msg, 6, ''),
            toid: jspb.Message.getFieldWithDefault(msg, 7, ''),
            body: jspb.Message.getFieldWithDefault(msg, 8, ''),
            status: jspb.Message.getFieldWithDefault(msg, 9, 0)
        }

        if (includeInstance) {
            obj.$jspbMessageInstance = msg
        }
        return obj
    }
}

/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Message}
 */
proto.Message.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes)
    var msg = new proto.Message
    return proto.Message.deserializeBinaryFromReader(msg, reader)
}

/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Message} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Message}
 */
proto.Message.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break
        }
        var field = reader.getFieldNumber()
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString())
                msg.setId(value)
                break
            case 2:
                var value = /** @type {string} */ (reader.readString())
                msg.setServerid(value)
                break
            case 3:
                var value = /** @type {number} */ (reader.readInt32())
                msg.setReqtype(value)
                break
            case 4:
                var value = /** @type {number} */ (reader.readInt64())
                msg.setMsgtime(value)
                break
            case 5:
                var value = /** @type {string} */ (reader.readString())
                msg.setAck(value)
                break
            case 6:
                var value = /** @type {string} */ (reader.readString())
                msg.setFromid(value)
                break
            case 7:
                var value = /** @type {string} */ (reader.readString())
                msg.setToid(value)
                break
            case 8:
                var value = /** @type {string} */ (reader.readString())
                msg.setBody(value)
                break
            case 9:
                var value = /** @type {number} */ (reader.readInt32())
                msg.setStatus(value)
                break
            default:
                reader.skipField()
                break
        }
    }
    return msg
}

/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.Message} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.Message.serializeBinaryToWriter = function (message, writer) {
    message.serializeBinaryToWriter(writer)
}

/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Message.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter()
    this.serializeBinaryToWriter(writer)
    return writer.getResultBuffer()
}

/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.Message.prototype.serializeBinaryToWriter = function (writer) {
    var f = undefined
    f = this.getId()
    if (f.length > 0) {
        writer.writeString(
            1,
            f
        )
    }
    f = this.getServerid()
    if (f.length > 0) {
        writer.writeString(
            2,
            f
        )
    }
    f = this.getReqtype()
    if (f !== 0) {
        writer.writeInt32(
            3,
            f
        )
    }
    f = this.getMsgtime()
    if (f !== 0) {
        writer.writeInt64(
            4,
            f
        )
    }
    f = this.getAck()
    if (f.length > 0) {
        writer.writeString(
            5,
            f
        )
    }
    f = this.getFromid()
    if (f.length > 0) {
        writer.writeString(
            6,
            f
        )
    }
    f = this.getToid()
    if (f.length > 0) {
        writer.writeString(
            7,
            f
        )
    }
    f = this.getBody()
    if (f.length > 0) {
        writer.writeString(
            8,
            f
        )
    }
    f = this.getStatus()
    if (f !== 0) {
        writer.writeInt32(
            9,
            f
        )
    }
}

/**
 * optional string id = 1;
 * @return {string}
 */
proto.Message.prototype.getId = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ''))
}

/** @param {string} value */
proto.Message.prototype.setId = function (value) {
    jspb.Message.setField(this, 1, value)
}

/**
 * optional string serverId = 2;
 * @return {string}
 */
proto.Message.prototype.getServerid = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ''))
}

/** @param {string} value */
proto.Message.prototype.setServerid = function (value) {
    jspb.Message.setField(this, 2, value)
}

/**
 * optional int32 reqType = 3;
 * @return {number}
 */
proto.Message.prototype.getReqtype = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0))
}

/** @param {number} value */
proto.Message.prototype.setReqtype = function (value) {
    jspb.Message.setField(this, 3, value)
}

/**
 * optional int64 msgTime = 4;
 * @return {number}
 */
proto.Message.prototype.getMsgtime = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0))
}

/** @param {number} value */
proto.Message.prototype.setMsgtime = function (value) {
    jspb.Message.setField(this, 4, value)
}

/**
 * optional string ack = 5;
 * @return {string}
 */
proto.Message.prototype.getAck = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ''))
}

/** @param {string} value */
proto.Message.prototype.setAck = function (value) {
    jspb.Message.setField(this, 5, value)
}

/**
 * optional string fromId = 6;
 * @return {string}
 */
proto.Message.prototype.getFromid = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ''))
}

/** @param {string} value */
proto.Message.prototype.setFromid = function (value) {
    jspb.Message.setField(this, 6, value)
}

/**
 * optional string toId = 7;
 * @return {string}
 */
proto.Message.prototype.getToid = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ''))
}

/** @param {string} value */
proto.Message.prototype.setToid = function (value) {
    jspb.Message.setField(this, 7, value)
}

/**
 * optional string body = 8;
 * @return {string}
 */
proto.Message.prototype.getBody = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ''))
}

/** @param {string} value */
proto.Message.prototype.setBody = function (value) {
    jspb.Message.setField(this, 8, value)
}

/**
 * optional int32 status = 9;
 * @return {number}
 */
proto.Message.prototype.getStatus = function () {
    return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0))
}

/** @param {number} value */
proto.Message.prototype.setStatus = function (value) {
    jspb.Message.setField(this, 9, value)
}

goog.object.extend(exports, proto)
